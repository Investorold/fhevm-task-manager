/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TodoList, TodoListInterface } from "../../contracts/TodoList";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    name: "TaskAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
    ],
    name: "TaskCompleted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "externalEuint32",
        name: "encryptedTask",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "addTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_taskId",
        type: "uint256",
      },
    ],
    name: "completeTask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTasks",
    outputs: [
      {
        components: [
          {
            internalType: "euint32",
            name: "encryptedContent",
            type: "bytes32",
          },
          {
            internalType: "ebool",
            name: "completed",
            type: "bytes32",
          },
        ],
        internalType: "struct TodoList.Task[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "taskCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061018a6100ae604080516080810182525f80825260208201819052918101829052606081019190915250604080516080810182527350157cffd6bbfa2dece204a89ec419c23ef5755d815273cd3ab3bd6bcc0c0bf3e27912a92043e817b1cf69602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b61092c806101975f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c80636dec7f9a1161004d5780636dec7f9a146100b3578063da1f12ab146100c8578063e1e29558146100d0575f80fd5b806304a87e3814610068578063082d1abb14610086575b5f80fd5b6100706100e3565b60405161007d919061072a565b60405180910390f35b6100a5610094366004610778565b60016020525f908152604090205481565b60405190815260200161007d565b6100c66100c136600461079e565b61015b565b005b6127116100a5565b6100c66100de366004610813565b61033b565b335f90815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015610152578382905f5260205f2090600202016040518060400160405290815f82015481526020016001820154815250508152602001906001019061010f565b50505050905090565b335f90815260208181526040808320548151601f860184900484028101840190925284825292916101a791879187908790819084018382808284375f9201919091525061046e92505050565b335f90815260208181526040808320815180830190925284825293945091908201906101d290610482565b90528154600181810184555f938452602080852084516002909402019283559283015191015533825281905260409020805461022d9190849081106102195761021961082a565b905f5260205f2090600202015f01546104a3565b50335f90815260208190526040902080546102689190849081106102535761025361082a565b905f5260205f2090600202015f0154336104b2565b50335f90815260208190526040902080546102a391908490811061028e5761028e61082a565b905f5260205f209060020201600101546104a3565b50335f90815260208190526040902080546102df9190849081106102c9576102c961082a565b905f5260205f20906002020160010154336104b2565b50335f9081526001602052604081208054916102fa8361083e565b909155505060405182815233907ff2ba834cb120f28cac9129d80d6990b8d99d9a0a71487cec7d88bd8a2ba45cb99060200160405180910390a25050505050565b335f90815260208190526040902054811061039c5760405162461bcd60e51b815260206004820152601360248201527f5461736b20646f6573206e6f7420657869737400000000000000000000000000604482015260640160405180910390fd5b6103a66001610482565b335f9081526020819052604090208054839081106103c6576103c661082a565b905f5260205f2090600202016001018190555061040f5f80336001600160a01b03166001600160a01b031681526020019081526020015f20828154811061028e5761028e61082a565b50335f90815260208190526040902080546104359190839081106102c9576102c961082a565b5060405181815233907ff684d89bb0f42287bf32838774e4b7f8a60c11804b3c6d1791fa55f3067926439060200160405180910390a250565b5f61047b838360046104c4565b9392505050565b5f61049d82610491575f610494565b60015b60ff165f6105e4565b92915050565b5f6104ae82306106a1565b5090565b5f6104bd83836106a1565b5090919050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b9061053d908890339089908990600401610882565b6020604051808303815f875af1158015610559573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061057d91906108f4565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b1580156105c6575f80fd5b505af11580156105d8573d5f803e3d5ffd5b50505050509392505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb90610659908790879060040161090b565b6020604051808303815f875af1158015610675573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069991906108f4565b949350505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b15801561070f575f80fd5b505af1158015610721573d5f803e3d5ffd5b50505050505050565b602080825282518282018190525f919060409081850190868401855b8281101561076b57815180518552860151868501529284019290850190600101610746565b5091979650505050505050565b5f60208284031215610788575f80fd5b81356001600160a01b038116811461047b575f80fd5b5f805f604084860312156107b0575f80fd5b83359250602084013567ffffffffffffffff808211156107ce575f80fd5b818601915086601f8301126107e1575f80fd5b8135818111156107ef575f80fd5b876020828501011115610800575f80fd5b6020830194508093505050509250925092565b5f60208284031215610823575f80fd5b5035919050565b634e487b7160e01b5f52603260045260245ffd5b5f6001820161085b57634e487b7160e01b5f52601160045260245ffd5b5060010190565b6054811061087e57634e487b7160e01b5f52602160045260245ffd5b9052565b8481525f60206001600160a01b03861660208401526080604084015284518060808501525f5b818110156108c45786810183015185820160a0015282016108a8565b505f60a0828601015260a0601f19601f830116850101925050506108eb6060830184610862565b95945050505050565b5f60208284031215610904575f80fd5b5051919050565b8281526040810161047b602083018461086256fea164736f6c6343000818000a";

type TodoListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TodoListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TodoList__factory extends ContractFactory {
  constructor(...args: TodoListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TodoList & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TodoList__factory {
    return super.connect(runner) as TodoList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TodoListInterface {
    return new Interface(_abi) as TodoListInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TodoList {
    return new Contract(address, _abi, runner) as unknown as TodoList;
  }
}
