/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TodoList {
  export type TaskStruct = {
    encryptedContent: BytesLike;
    completed: BytesLike;
  };

  export type TaskStructOutput = [
    encryptedContent: string,
    completed: string
  ] & { encryptedContent: string; completed: string };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTask"
      | "completeTask"
      | "getTasks"
      | "protocolId"
      | "taskCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TaskAdded" | "TaskCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTasks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taskCount", data: BytesLike): Result;
}

export namespace TaskAddedEvent {
  export type InputTuple = [owner: AddressLike, taskId: BigNumberish];
  export type OutputTuple = [owner: string, taskId: bigint];
  export interface OutputObject {
    owner: string;
    taskId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCompletedEvent {
  export type InputTuple = [owner: AddressLike, taskId: BigNumberish];
  export type OutputTuple = [owner: string, taskId: bigint];
  export interface OutputObject {
    owner: string;
    taskId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTask: TypedContractMethod<
    [encryptedTask: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  completeTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTasks: TypedContractMethod<[], [TodoList.TaskStructOutput[]], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  taskCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTask"
  ): TypedContractMethod<
    [encryptedTask: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTasks"
  ): TypedContractMethod<[], [TodoList.TaskStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taskCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "TaskAdded"
  ): TypedContractEvent<
    TaskAddedEvent.InputTuple,
    TaskAddedEvent.OutputTuple,
    TaskAddedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCompleted"
  ): TypedContractEvent<
    TaskCompletedEvent.InputTuple,
    TaskCompletedEvent.OutputTuple,
    TaskCompletedEvent.OutputObject
  >;

  filters: {
    "TaskAdded(address,uint256)": TypedContractEvent<
      TaskAddedEvent.InputTuple,
      TaskAddedEvent.OutputTuple,
      TaskAddedEvent.OutputObject
    >;
    TaskAdded: TypedContractEvent<
      TaskAddedEvent.InputTuple,
      TaskAddedEvent.OutputTuple,
      TaskAddedEvent.OutputObject
    >;

    "TaskCompleted(address,uint256)": TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
    TaskCompleted: TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
  };
}
