/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TaskManager {
  export type TaskStruct = {
    title: BytesLike;
    description: BytesLike;
    dueDate: BytesLike;
    priority: BytesLike;
    numericId: BytesLike;
    status: BigNumberish;
  };

  export type TaskStructOutput = [
    title: string,
    description: string,
    dueDate: string,
    priority: string,
    numericId: string,
    status: bigint
  ] & {
    title: string;
    description: string;
    dueDate: string;
    priority: string;
    numericId: string;
    status: bigint;
  };
}

export interface TaskManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackCount"
      | "completeTask"
      | "createTask"
      | "createTaskWithNumbers"
      | "createTaskWithText"
      | "deleteTaskById"
      | "editTask"
      | "getSharedTasks"
      | "getTaskId"
      | "getTaskIndex"
      | "getTasks"
      | "indexToTaskId"
      | "isTaskSharedWith"
      | "lastDueSoonCount"
      | "owner"
      | "protocolId"
      | "renounceOwnership"
      | "requestInitiator"
      | "requestSharedTaskDecryption"
      | "requestSharedTaskDecryptionById"
      | "requestTaskDecryption"
      | "requestTaskDecryptionById"
      | "requestTasksDueSoonCount"
      | "setFee"
      | "shareTask"
      | "shareTaskById"
      | "sharedTasks"
      | "taskCreationFee"
      | "taskDecryptionCallback"
      | "taskIdToIndex"
      | "tasks"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Debug"
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "OwnershipTransferred"
      | "TaskCreated"
      | "TaskDecrypted"
      | "TaskShared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackCount",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTaskWithNumbers",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTaskWithText",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTaskById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editTask",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharedTasks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTasks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "indexToTaskId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTaskSharedWith",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDueSoonCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestInitiator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSharedTaskDecryption",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSharedTaskDecryptionById",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTaskDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTaskDecryptionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTasksDueSoonCount",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTask",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareTaskById",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedTasks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskDecryptionCallback",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taskIdToIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tasks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "callbackCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTaskWithNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTaskWithText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTaskById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSharedTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTaskId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexToTaskId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTaskSharedWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDueSoonCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSharedTaskDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSharedTaskDecryptionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTaskDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTaskDecryptionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTasksDueSoonCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareTaskById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskDecryptionCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskIdToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DebugEvent {
  export type InputTuple = [message: string, value: BigNumberish];
  export type OutputTuple = [message: string, value: bigint];
  export interface OutputObject {
    message: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [requestId: BigNumberish, initiator: AddressLike];
  export type OutputTuple = [requestId: bigint, initiator: string];
  export interface OutputObject {
    requestId: bigint;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [owner: AddressLike, taskId: BigNumberish];
  export type OutputTuple = [owner: string, taskId: bigint];
  export interface OutputObject {
    owner: string;
    taskId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskDecryptedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    user: AddressLike,
    title: BigNumberish,
    dueDate: BigNumberish,
    priority: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    user: string,
    title: bigint,
    dueDate: bigint,
    priority: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    user: string;
    title: bigint;
    dueDate: bigint;
    priority: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskSharedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    owner: AddressLike,
    recipient: AddressLike
  ];
  export type OutputTuple = [taskId: bigint, owner: string, recipient: string];
  export interface OutputObject {
    taskId: bigint;
    owner: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TaskManager extends BaseContract {
  connect(runner?: ContractRunner | null): TaskManager;
  waitForDeployment(): Promise<this>;

  interface: TaskManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackCount: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  completeTask: TypedContractMethod<
    [taskIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  createTaskWithNumbers: TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      encryptedNumericId: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  createTaskWithText: TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDescription: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  deleteTaskById: TypedContractMethod<
    [taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  editTask: TypedContractMethod<
    [
      taskIndex: BigNumberish,
      newEncryptedTitle: BytesLike,
      newEncryptedDueDate: BytesLike,
      newEncryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getSharedTasks: TypedContractMethod<
    [recipient: AddressLike],
    [bigint[]],
    "view"
  >;

  getTaskId: TypedContractMethod<
    [owner_: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  getTaskIndex: TypedContractMethod<
    [owner_: AddressLike, taskId: BigNumberish],
    [bigint],
    "view"
  >;

  getTasks: TypedContractMethod<
    [user: AddressLike],
    [TaskManager.TaskStructOutput[]],
    "view"
  >;

  indexToTaskId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  isTaskSharedWith: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  lastDueSoonCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestInitiator: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  requestSharedTaskDecryption: TypedContractMethod<
    [taskIndex: BigNumberish, originalOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSharedTaskDecryptionById: TypedContractMethod<
    [taskId: BigNumberish, originalOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  requestTaskDecryption: TypedContractMethod<
    [taskIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestTaskDecryptionById: TypedContractMethod<
    [taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestTasksDueSoonCount: TypedContractMethod<
    [encryptedTimeMargin: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;

  shareTask: TypedContractMethod<
    [taskIndex: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  shareTaskById: TypedContractMethod<
    [taskId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  sharedTasks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  taskCreationFee: TypedContractMethod<[], [bigint], "view">;

  taskDecryptionCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  taskIdToIndex: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  tasks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, string, string, bigint] & {
        title: string;
        description: string;
        dueDate: string;
        priority: string;
        numericId: string;
        status: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackCount"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeTask"
  ): TypedContractMethod<[taskIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTaskWithNumbers"
  ): TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      encryptedNumericId: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTaskWithText"
  ): TypedContractMethod<
    [
      encryptedTitle: BytesLike,
      encryptedDescription: BytesLike,
      encryptedDueDate: BytesLike,
      encryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deleteTaskById"
  ): TypedContractMethod<[taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "editTask"
  ): TypedContractMethod<
    [
      taskIndex: BigNumberish,
      newEncryptedTitle: BytesLike,
      newEncryptedDueDate: BytesLike,
      newEncryptedPriority: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSharedTasks"
  ): TypedContractMethod<[recipient: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTaskId"
  ): TypedContractMethod<
    [owner_: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTaskIndex"
  ): TypedContractMethod<
    [owner_: AddressLike, taskId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTasks"
  ): TypedContractMethod<
    [user: AddressLike],
    [TaskManager.TaskStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "indexToTaskId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTaskSharedWith"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastDueSoonCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestInitiator"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "requestSharedTaskDecryption"
  ): TypedContractMethod<
    [taskIndex: BigNumberish, originalOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSharedTaskDecryptionById"
  ): TypedContractMethod<
    [taskId: BigNumberish, originalOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestTaskDecryption"
  ): TypedContractMethod<[taskIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTaskDecryptionById"
  ): TypedContractMethod<[taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTasksDueSoonCount"
  ): TypedContractMethod<
    [encryptedTimeMargin: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shareTask"
  ): TypedContractMethod<
    [taskIndex: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareTaskById"
  ): TypedContractMethod<
    [taskId: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharedTasks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "taskCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "taskDecryptionCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "taskIdToIndex"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, string, string, bigint] & {
        title: string;
        description: string;
        dueDate: string;
        priority: string;
        numericId: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Debug"
  ): TypedContractEvent<
    DebugEvent.InputTuple,
    DebugEvent.OutputTuple,
    DebugEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskDecrypted"
  ): TypedContractEvent<
    TaskDecryptedEvent.InputTuple,
    TaskDecryptedEvent.OutputTuple,
    TaskDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "TaskShared"
  ): TypedContractEvent<
    TaskSharedEvent.InputTuple,
    TaskSharedEvent.OutputTuple,
    TaskSharedEvent.OutputObject
  >;

  filters: {
    "Debug(string,uint256)": TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;
    Debug: TypedContractEvent<
      DebugEvent.InputTuple,
      DebugEvent.OutputTuple,
      DebugEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256,address)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TaskCreated(address,uint256)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;

    "TaskDecrypted(uint256,address,uint64,uint64,uint8)": TypedContractEvent<
      TaskDecryptedEvent.InputTuple,
      TaskDecryptedEvent.OutputTuple,
      TaskDecryptedEvent.OutputObject
    >;
    TaskDecrypted: TypedContractEvent<
      TaskDecryptedEvent.InputTuple,
      TaskDecryptedEvent.OutputTuple,
      TaskDecryptedEvent.OutputObject
    >;

    "TaskShared(uint256,address,address)": TypedContractEvent<
      TaskSharedEvent.InputTuple,
      TaskSharedEvent.OutputTuple,
      TaskSharedEvent.OutputObject
    >;
    TaskShared: TypedContractEvent<
      TaskSharedEvent.InputTuple,
      TaskSharedEvent.OutputTuple,
      TaskSharedEvent.OutputObject
    >;
  };
}
